// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 * Represents a PlatformerGame instance
 */
class Main {
    /** Starts the game, and handles inputs from the user that control
     *  the bat's movement direction. */
    function void main() {
        //Main function local variables
        var boolean exit;       // true when the game is over
        var Player player1;
        var Player player2;
        var GameMap gameMap;
        //Player 1 local variables
        var char key1;
        var boolean p1OnGround;
        //Player 2 local variables
        var char key2;
        var boolean p2OnGround;
        var int p1ScoreInt, p2ScoreInt;

        //Intialization of game variables
        let player1 = Player.new(253, 100);
        let player2 = Player.new(100, 100);

        let gameMap = GameMap.new();

        // Map drawing
        do gameMap.clearMap();
        do gameMap.loadLevel(1);
        do gameMap.drawMap();

        //Printing player 1 an 2 score;
        do Output.moveCursor(22,4);
        do Output.printString("P1 Score: ");

        do Output.moveCursor(22,40);
        do Output.printString("P2 Score: ");

        //Intializing player 1 and 2 score
        let p1ScoreInt = 10000;
        let p2ScoreInt = 10000;

        let exit = false;

        //Main loop that runs until the game is over
        while (~exit) {
            //***********************PLAYER 1 LOGIC OUTSIDE OF FUNCTION CALL ***********************************************
            //do player1Logic(player1);
            //Checking to see what key is pressed continually
            let key1 = Keyboard.keyPressed();

            //player movement logic logic gets called
            if (key1 = 130) { // leftArrow
                //make move left
                do player1.setDir(true);
            }
            else {
                if (key1 = 132) { // rightArrow
                    //make move right 
                    do player1.setDir(false);
                }
                else {
                    if (key1 = 140) { let exit = true; }
                }
            }

            //Move that way until changed
            if(player1.getDir())
            {
                do player1.move(-1, 0, gameMap);
            }
            else{
                do player1.move(1, 0, gameMap);
            }
            
            //Checking to see if player 1 is on the ground if so checking to see if the jump key is pressed
            let p1OnGround = player1.isOnGround(gameMap);

            if(key1 = 131 & p1OnGround){ // Up Arrow
                //Store jump value and reset number
                do player1.setJump(400);  //let jump1 = 200;
                do player1.setNumber(1);  // let number1 = 1;
                do player1.setJumpLoop(0); //let jumpLoop1 = 0;
            }

            //If up arrow is not pressed on ground reset tick and number
            if (p1OnGround = true){
                do player1.setNumber(1);  // let number1 = 1;
                do player1.setTick(0);    //let tick1 = 0;
            }

            if(p1OnGround = false) {//If not on ground run gravity logic
                //If the player hits cieling kill jump momentum
                if(player1.hitsCieling(gameMap) = true){
                    do player1.setJump(0);  //let jump1 = 200;//let jump1=0;
                }
                //Resetting the gravity loop variable before it is run
                do player1.setGravity(0);  //let gravityLoop1 = 0;
                //Gravity moves player down number * 1 pixels
                while (player1.getGravity() < player1.getNumber()){ //(gravityLoop1 < number1){
                    //moving the player down
                    do player1.move(0, 1, gameMap);
                    //incrementing through the gravity loop
                    do player1.setGravity((player1.getGravity() + 1)); //let gravityLoop1 = gravityLoop1 + 1;
                }
            }

            //Checking to see if the jump ahs been triggered
            if(player1.getJump() > 0) { //(jump1 > 0){
            
                //Jumping a certain amount each time.
                while(player1.getJumpLoop() < (player1.getJump()/10)){ //(jumpLoop1 < (jump1/10)){
                    //moving the player up
                    do player1.move(0, -1, gameMap);
                    //incrementing through the jump loop
                    do player1.setJumpLoop((player1.getJumpLoop()+1)); //let jumpLoop1 = jumpLoop1 + 1;
                }
                //Making the player move up less as jump decreases
                do player1.setJump(player1.getJump() - 1); //let jump1 = jump1 - 1;
            }

            //Cycling every 20 ticks to make player fall back down more and more  adding in acceleration
            if(player1.getTick() = 20) //(tick1 =20)
            {
                //Increasing the speed the palyer falls each 20 ticks
                do player1.setTick(1); //let tick1 =1;
                if(player1.getNumber() < 8){ //(number1 < 8){
                    do player1.setNumber(player1.getNumber() + 1);//let number1 = number1 + 1;
                }
            }
            else{
                //Counting the ticks
                do player1.setTick(player1.getTick() + 1); //let tick1 = tick1 + 1;
            }
            //*************************END OF PLAYER 1 LOGIC****************************************************************

            //***********************PLAYER 2 LOGIC OUTSIDE OF FUNCTION CALL ***********************************************
            //do player2Logic(player2);
            //a = 97, d =100, w =119
            //Checking to see what key is pressed continually
            let key2 = Keyboard.keyPressed();

            //player movement logic logic gets called
            if (key2 = 97) { // a key
                //making the player move left
                do player2.setDir(true);
            }
            else {
                if (key2 = 100) { // d key
                    //making the player move right
                    do player2.setDir(false);
                }
                else {
                    if (key2 = 140) { let exit = true; }
                }
            }

            //Seeing which way we are moving and move it
            if(player2.getDir())
            {
                do player2.move(-1, 0, gameMap);
            }
            else{
                do player2.move(1, 0, gameMap);
            }
            
            //Checking to see if player 1 is on the ground if so checking to see if the jump key is pressed
            let p2OnGround = player2.isOnGround(gameMap);

            if(key2 = 119 & p2OnGround){ // w key
                //Store jump value and reset number
                do player2.setJump(300);  //let jump1 = 200;
                do player2.setNumber(1);  // let number1 = 1;
                do player2.setJumpLoop(0); //let jumpLoop1 = 0;
            }

            //If up arrow is not pressed on ground reset tick and number
            if (p2OnGround = true){
                do player2.setNumber(1);  // let number1 = 1;
                do player2.setTick(0);    //let tick1 = 0;
            }

            if(p2OnGround = false) {//If not on ground run gravity logic
                //If the player hits cieling kill jump momentum
                if(player2.hitsCieling(gameMap) = true){
                    do player2.setJump(0);  //let jump1 = 200;//let jump1=0;
                }
                //Resetting the gravity loop variable before it is run
                do player2.setGravity(0);  //let gravityLoop1 = 0;
                //Gravity moves player down number * 1 pixels
                while (player2.getGravity() < player2.getNumber()){ //(gravityLoop1 < number1){
                    //moving the player down
                    do player2.move(0, 1, gameMap);
                    //incrementing through the gravity loop
                    do player2.setGravity((player2.getGravity() + 1)); //let gravityLoop1 = gravityLoop1 + 1;
                }
            }

            //Checking to see if the jump ahs been triggered
            if(player2.getJump() > 0) { //(jump1 > 0){
            
                //Jumping a certain amount each time.
                while(player2.getJumpLoop() < (player2.getJump()/10)){ //(jumpLoop1 < (jump1/10)){
                    //moving the player up
                    do player2.move(0, -1, gameMap);
                    //incrementing through the jump loop
                    do player2.setJumpLoop((player2.getJumpLoop()+1)); //let jumpLoop1 = jumpLoop1 + 1;
                }
                //Making the player move up less as jump decreases
                do player2.setJump(player2.getJump() - 1); //let jump1 = jump1 - 1;
            }

            //Cycling every 20 ticks to make player fall back down more and more  adding in acceleration
            if(player2.getTick() = 20) //(tick1 =20)
            {
                //Increasing the speed the palyer falls each 20 ticks
                do player2.setTick(1); //let tick1 =1;
                if(player2.getNumber() < 8){ //(number1 < 8){
                    do player2.setNumber(player2.getNumber() + 1);//let number1 = number1 + 1;
                }
            }
            else{
                //Counting the ticks
                do player2.setTick(player2.getTick() + 1); //let tick1 = tick1 + 1;
            }
            //*************************END OF PLAYER 2 LOGIC****************************************************************
            
            //do renderGame(); // render game graphics after move to help with collisions
            //*****************************GAME RENDER logic outside of function call:**************************************
            //Scoreboard drawing for player 1 and 2
            do Screen.setColor(true);
            do Output.moveCursor(22,14);
            do Output.printInt(p1ScoreInt);

            do Output.moveCursor(22,50);
            do Output.printInt(p2ScoreInt);

            //Player drawing
            do player1.draw();
            do player2.draw();
            //****************************END OF RENDER GAME**********************************
            
            //Reduce score by 1 for player 1 and 2 until either player has won
            if(player1.won() = false){
                let p1ScoreInt = p1ScoreInt -1;
            }
            if(player2.won() = false){
                let p2ScoreInt = p2ScoreInt -1;
            }
            
            //Checking to see if both players have one. If so exiting the game and displaying who won.
            if(player1.won() & player2.won()){
                let exit = true;
            }
            do Sys.wait(5);// wait to slow down game 
        }

        //Clearing the screen before printing game over
        do Screen.clearScreen();

        //If the game ended
	    if (exit) {
            // Drawing victory blocks around words
            do gameMap.clearMap();
            do gameMap.loadLevel(9);//Loading cool box around game over screen
            do gameMap.drawMap();

            //printing game over
            do Screen.setColor(true);
            do Output.moveCursor(10,27);
	        do Output.printString("GAME OVER");

            //Determining who got the higher score and saying that player won
            if(p1ScoreInt > p2ScoreInt){
                do Output.moveCursor(12,24);
	            do Output.printString("Player 1 Wins!!");
                do Output.moveCursor(14,24);
                do Output.printString("Score: ");
                do Output.moveCursor(14,34);
                do Output.printInt(p2ScoreInt);
            }
            else{
                do Output.moveCursor(12,24);
	            do Output.printString("Player 2 Wins!!");
                do Output.moveCursor(14,24);
                do Output.printString("Score: ");
                do Output.moveCursor(14,34);
                do Output.printInt(p2ScoreInt);
            }
	    }
        return;
    }
}