// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 * Represents a PlatformerGame instance
 */
class Main {
    /** Starts the game, and handles inputs from the user that control
     *  the bat's movement direction. */
    static String player1Name;
    static String player2Name;

    function void main() {
        //Main function local variables
        var boolean exit;       // true when the game is over
        var Player player1;
        var Player player2;
        var GameMap gameMap;
        var String printString;
        var int printStringLength;
        //Player 1 local variables
        var char key1;
        var boolean p1OnGround;
        //Player 2 local variables
        var char key2;
        var boolean p2OnGround;
        var int p1ScoreInt, p2ScoreInt;

        //key to store the space for the instruction scree
        var char spaceKey;

        let spaceKey = 0;

        //Intialization of game variables
        let player1 = Player.new(253, 100);
        let player2 = Player.new(100, 100);

        //set player name to default player 1 and 2
        let player1Name = "Player_1";
        let player2Name = "Player_2";

        let gameMap = GameMap.new();
        
        //******************************START SCREEN**************************************
        //Drawing Main menu blocks around words
        do gameMap.loadLevel(10);//Loading cool box around game over screen
        do gameMap.drawMap();

        //drawStartScreen method to print the start screen to prompt user for input
        do Main.drawStartScreen();

        //once user has left the start screen, clear the screen and load level 1
        do Screen.clearScreen();
        //******************************END START SCREEN**********************************

        //******************************START INSTRUCTION SCREEN**********************************
        
        //outprint statementes to draw the screen to welcome the user    
        //do gameMap.loadLevel(10);//Loading cool box around game over screen
    
        do Output.moveCursor(4, 20);
        do Output.printString("=========================");
        do Output.moveCursor(5, 20);
        do Output.printString("===   INSTRUCTIONS    ===");
        do Output.moveCursor(6,20);
        do Output.printString("=========================");
        do Output.moveCursor(8,27);
        do Output.printString("== Keys ==");

        let printString = " ";
    

        let printString = "Player 1 is controlled using the LEFT UP RIGHT Arrows";
        let printStringLength = printString.length();
        do Output.moveCursor(9,((64-printStringLength)/2));
        do Output.printString(printString);

        let printString = "Player 2 is controlled using the A W D keys";
        let printStringLength = printString.length();
        do Output.moveCursor(10,((64-printStringLength)/2));
        do Output.printString(printString);

        let printString = "== Goal ==";
        let printStringLength = printString.length();
        do Output.moveCursor(12,((64-printStringLength)/2));
        do Output.printString(printString);


        let printString = "Reach the victory block ( ) as fast as possible ";
        let printStringLength = printString.length();
        do Output.printString(printStringLength);
        do Output.moveCursor(13,((64-printStringLength)/2));
        do Output.printString(printString);

        let printString = "to get the highest score by navigating";
        let printStringLength = printString.length();
        do Output.printString(printStringLength);
        do Output.moveCursor(14,((64-printStringLength)/2));
        do Output.printString(printString);
        
        let printString = "the maze and collecting the key ( )";
        let printStringLength = printString.length();
        do Output.printString(printStringLength);
        do Output.moveCursor(15,((64-printStringLength)/2));
        do Output.printString(printString);

        let printString = "== Rules ==";
        do Output.moveCursor(17,((64-printString.length())/2));
        do Output.printString(printString);

        let printString = "Each player must collect the key before they can win";
        do Output.moveCursor(18,((64-printString.length())/2));
        do Output.printString(printString);

        let printString = "Hitting a spike will send you back to start";
        do Output.moveCursor(19,((64-printString.length())/2));
        do Output.printString(printString);


        // menu for user to select to navigate the game
        do Output.moveCursor(21, 18);
        do Output.printString("Press SPACE to start the game");//25

        //Drawing the vic block for refernece
        do Screen.setColor(true);
        do Screen.drawRectangle((32*8)+7, (18*8), (32*8)+14, (18*8) + 7);//left |
        do Screen.setColor(false);
        do Screen.drawRectangle((32*8)+9, (18*8)+4, (32*8) + 12, (18*8)+4);// lon horizontal bar
        do Screen.drawRectangle((32*8)+11, (18*8)+3, (32*8) + 11, (18*8)+5);// small veritcal bar
        
        //Drawing the Key block for reference
        do Screen.setColor(true);
        do Screen.drawRectangle((47*8)-1, (21*8)-3, (47*8) - 1, (21*8) + 4);// left |
        do Screen.drawRectangle((47*8)-1, (21*8) + 4, (47*8) + 6, (21*8) + 4);//Bottom _
        do Screen.drawRectangle((47*8) + 6, (21*8)-3, (47*8) + 6, (21*8) + 4);//right |
        do Screen.drawRectangle((47*8)-1, (21*8)-3, (47*8) + 6, (21*8) - 3);//top _
        //if(key not gotten)
        do Screen.drawRectangle((47*8)+1, (21*8)+1, (47*8) + 4, (21*8) + 1);// lon horizontal bar
        do Screen.drawRectangle((47*8)+3, (21*8), (47*8) + 3, (21*8) + 2);// small veritcal bar

        //display the instructions while the keyboard is not pressed
        while(~(spaceKey = 32))
        {
            let spaceKey =  Keyboard.keyPressed();

        }

        do Screen.clearScreen();


        //******************************END INSTRUCTION SCREEN**********************************


        //******************************DRAW MAP AND SCORE****************************************
        // Map drawing
        do gameMap.loadLevel(1);
        do gameMap.drawMap();

        //Printing player 1 an 2 score;
        do Output.moveCursor(22,4);
        do Output.printString(player1Name);
        do Output.printString(" Score: ");

        do Output.moveCursor(22,40);
        do Output.printString(player2Name);
        do Output.printString(" Score: ");

        //Intializing player 1 and 2 score
        let p1ScoreInt = 10000;
        let p2ScoreInt = 10000;

        let exit = false;
        //******************************END DRAW MAP AND SCORE****************************************

        //************************Main loop that runs until the game is over**************************
        while (~exit) {
            //***********************PLAYER 1 LOGIC OUTSIDE OF FUNCTION CALL ***********************************************
            //do player1Logic(player1);
            //Checking to see what key is pressed continually
            let key1 = Keyboard.keyPressed();

            //player movement logic logic gets called
            if (key1 = 130) { // leftArrow
                //make move left
                do player1.setDir(true);
            }
            else {
                if (key1 = 132) { // rightArrow
                    //make move right 
                    do player1.setDir(false);
                }
                else {
                    if (key1 = 140) { let exit = true; }
                }
            }

            //Move that way until changed
            if(player1.getDir())
            {
                do player1.move(-1, 0, gameMap, 1);
            }
            else{
                do player1.move(1, 0, gameMap, 1);
            }
            
            //Checking to see if player 1 is on the ground if so checking to see if the jump key is pressed
            let p1OnGround = player1.isOnGround(gameMap);

            if(key1 = 131 & p1OnGround){ // Up Arrow
                //Store jump value and reset number
                do player1.setJump(400);  //let jump1 = 200;
                do player1.setNumber(1);  // let number1 = 1;
                do player1.setJumpLoop(0); //let jumpLoop1 = 0;
            }

            //If up arrow is not pressed on ground reset tick and number
            if (p1OnGround = true){
                do player1.setNumber(1);  // let number1 = 1;
                do player1.setTick(0);    //let tick1 = 0;
            }

            if(p1OnGround = false) {//If not on ground run gravity logic
                //If the player hits cieling kill jump momentum
                if(player1.hitsCieling(gameMap) = true){
                    do player1.setJump(0);  //let jump1 = 200;//let jump1=0;
                }
                //Resetting the gravity loop variable before it is run
                do player1.setGravity(0);  //let gravityLoop1 = 0;
                //Gravity moves player down number * 1 pixels
                while (player1.getGravity() < player1.getNumber()){ //(gravityLoop1 < number1){
                    //moving the player down
                    do player1.move(0, 1, gameMap, 1);
                    //incrementing through the gravity loop
                    do player1.setGravity((player1.getGravity() + 1)); //let gravityLoop1 = gravityLoop1 + 1;
                }
            }

            //Checking to see if the jump ahs been triggered
            if(player1.getJump() > 0) { //(jump1 > 0){
            
                //Jumping a certain amount each time.
                while(player1.getJumpLoop() < (player1.getJump()/10)){ //(jumpLoop1 < (jump1/10)){
                    //moving the player up
                    do player1.move(0, -1, gameMap, 1);
                    //incrementing through the jump loop
                    do player1.setJumpLoop((player1.getJumpLoop()+1)); //let jumpLoop1 = jumpLoop1 + 1;
                }
                //Making the player move up less as jump decreases
                do player1.setJump(player1.getJump() - 1); //let jump1 = jump1 - 1;
            }

            //Cycling every 20 ticks to make player fall back down more and more  adding in acceleration
            if(player1.getTick() = 20) //(tick1 =20)
            {
                //Increasing the speed the palyer falls each 20 ticks
                do player1.setTick(1); //let tick1 =1;
                if(player1.getNumber() < 8){ //(number1 < 8){
                    do player1.setNumber(player1.getNumber() + 1);//let number1 = number1 + 1;
                }
            }
            else{
                //Counting the ticks
                do player1.setTick(player1.getTick() + 1); //let tick1 = tick1 + 1;
            }
            //*************************END OF PLAYER 1 LOGIC****************************************************************

            //***********************PLAYER 2 LOGIC OUTSIDE OF FUNCTION CALL ***********************************************
            //do player2Logic(player2);
            //a = 97, d =100, w =119
            //Checking to see what key is pressed continually
            let key2 = Keyboard.keyPressed();

            //player movement logic logic gets called
            if (key2 = 97) { // a key
                //making the player move left
                do player2.setDir(true);
            }
            else {
                if (key2 = 100) { // d key
                    //making the player move right
                    do player2.setDir(false);
                }
                else {
                    if (key2 = 140) { let exit = true; }
                }
            }

            //Seeing which way we are moving and move it
            if(player2.getDir())
            {
                do player2.move(-1, 0, gameMap, 2);
            }
            else{
                do player2.move(1, 0, gameMap, 2);
            }
            
            //Checking to see if player 1 is on the ground if so checking to see if the jump key is pressed
            let p2OnGround = player2.isOnGround(gameMap);

            if(key2 = 119 & p2OnGround){ // w key
                //Store jump value and reset number
                do player2.setJump(300);  //let jump1 = 200;
                do player2.setNumber(1);  // let number1 = 1;
                do player2.setJumpLoop(0); //let jumpLoop1 = 0;
            }

            //If up arrow is not pressed on ground reset tick and number
            if (p2OnGround = true){
                do player2.setNumber(1);  // let number1 = 1;
                do player2.setTick(0);    //let tick1 = 0;
            }

            if(p2OnGround = false) {//If not on ground run gravity logic
                //If the player hits cieling kill jump momentum
                if(player2.hitsCieling(gameMap) = true){
                    do player2.setJump(0);  //let jump1 = 200;//let jump1=0;
                }
                //Resetting the gravity loop variable before it is run
                do player2.setGravity(0);  //let gravityLoop1 = 0;
                //Gravity moves player down number * 1 pixels
                while (player2.getGravity() < player2.getNumber()){ //(gravityLoop1 < number1){
                    //moving the player down
                    do player2.move(0, 1, gameMap, 2);
                    //incrementing through the gravity loop
                    do player2.setGravity((player2.getGravity() + 1)); //let gravityLoop1 = gravityLoop1 + 1;
                }
            }

            //Checking to see if the jump ahs been triggered
            if(player2.getJump() > 0) { //(jump1 > 0){
            
                //Jumping a certain amount each time.
                while(player2.getJumpLoop() < (player2.getJump()/10)){ //(jumpLoop1 < (jump1/10)){
                    //moving the player up
                    do player2.move(0, -1, gameMap, 2);
                    //incrementing through the jump loop
                    do player2.setJumpLoop((player2.getJumpLoop()+1)); //let jumpLoop1 = jumpLoop1 + 1;
                }
                //Making the player move up less as jump decreases
                do player2.setJump(player2.getJump() - 1); //let jump1 = jump1 - 1;
            }

            //Cycling every 20 ticks to make player fall back down more and more  adding in acceleration
            if(player2.getTick() = 20) //(tick1 =20)
            {
                //Increasing the speed the palyer falls each 20 ticks
                do player2.setTick(1); //let tick1 =1;
                if(player2.getNumber() < 8){ //(number1 < 8){
                    do player2.setNumber(player2.getNumber() + 1);//let number1 = number1 + 1;
                }
            }
            else{
                //Counting the ticks
                do player2.setTick(player2.getTick() + 1); //let tick1 = tick1 + 1;
            }
            //*************************END OF PLAYER 2 LOGIC****************************************************************
            
            //*************************START OF IF A PLAYER HITS A SPIKE MOVE BACK TO SPAWN*********************************
            if(player1.died())
            {
                do player1.reSpawn(1);
                do player1.newLife();
            }
            if(player2.died())
            {
                do player2.reSpawn(2);
                do player2.newLife();
            }
            //*************************END OF IF A PLAYER HITS A SPIKE MOVE BACK TO SPAWN*********************************

            //*****************************GAME RENDER logic outside of function call:**************************************
            //Scoreboard drawing for player 1 and 2
            do Screen.setColor(true);
            do Output.moveCursor(22,19);

            do Output.printInt(p1ScoreInt);

            do Output.moveCursor(22,59);
            do Output.printInt(p2ScoreInt);

            //Player drawing
            do player1.draw(1);
            do player2.draw(2);
            //****************************END OF RENDER GAME**********************************
            
            //***************************SUBTRACTING PLAYER SCORE UNTIL THEY REACH THE END****
            //Reduce score by 1 for player 1 and 2 until either player has won
            if(player1.won() = false){
                let p1ScoreInt = p1ScoreInt -1;
            }
            if(player2.won() = false){
                let p2ScoreInt = p2ScoreInt -1;
            }
            //***************************END of Subtract Score********************************
            
            //Checking to see if both players have one. If so exiting the game and displaying who won.
            if(player1.won() & player2.won()){
                let exit = true;
            }
            do Sys.wait(5);// wait to slow down game 
        }

        //Clearing the screen before printing game over
        do Screen.clearScreen();

        //If the game ended
	    if (exit) {
            //************************************DRAWING END SCREEN**********************************
            // Drawing victory blocks around words
            do gameMap.loadLevel(9);//Loading cool box around game over screen
            do gameMap.drawMap();

            //printing game over
            do Screen.setColor(true);
            do Output.moveCursor(10,27);
	        do Output.printString("GAME OVER");

            //Determining who got the higher score and saying that player won
            if(p1ScoreInt > p2ScoreInt){
                do Output.moveCursor(12,22);
	            do Output.printString(player1Name);
                do Output.printString("     Wins!!");
                do Output.moveCursor(14,24);
                do Output.printString("Score: ");
                do Output.moveCursor(14,34);
                do Output.printInt(p2ScoreInt);
            }
            else{
                do Output.moveCursor(12,22);
	            do Output.printString(player2Name);
                do Output.printString("     Wins!!");
                do Output.moveCursor(14,24);
                do Output.printString("Score: ");
                do Output.moveCursor(14,34);
                do Output.printInt(p2ScoreInt);
            }
            //************************************END OF DRAW END SCREEN*******************************
	    }
        
        return;
    }

    //*****************************************START OF DRAWING THE START SCREEN**********************
    function boolean drawStartScreen() {
        var char key;   //store the value read in from the keybaord to allow the user to select to state the game, quit or choose player names

        //outprint statementes to draw the screen to welcome the user        
        //do Output.moveCursor(4, 20);
        //do Output.printString("=========================");
        do Output.moveCursor(5, 20);
        do Output.printString("=== JackOS Platformer ===");
        //do Output.moveCursor(6,20);
        //do Output.printString("=========================");
        do Output.moveCursor(7,18);
        do Output.printString("By: Jacob Novak, Kyle Dramov");
        do Output.moveCursor(8,23);
        do Output.printString("And Dorian Quimby");
        
        // menu for user to select to navigate the game
        do Output.moveCursor(11, 18);
        do Output.printString("Press SPACE to start the game");//25
        do Output.moveCursor(12, 20);
        do Output.printString("Press 1 to name Player 1");
        do Output.moveCursor(13, 20);
        do Output.printString("Press 2 to name Player 2");
        do Output.moveCursor(14, 24);
        do Output.printString("Press Q to quit");

        //print out the user name
        do Output.moveCursor(16, 24);
        do Output.printString("Player 1: ");
        do Output.printString(player1Name);
        do Output.moveCursor(17, 24);
        do Output.printString("Player 2: ");
        do Output.printString(player2Name);
    
    
        while (true) {
            //store the keypress integer value in key
            let key = Keyboard.keyPressed();
            //check if it is a space key, if it is, go to the game
            if (key = 32) { // Space key
                // Wait for key release
                while (Keyboard.keyPressed() = 32) {
                }
                return true;
            }
            //check fi q or Q is entered and halt the system
            if ((key = 81) | (key = 113)) { // Q key or q key to quit
                // Halt the system
                do Screen.clearScreen();
                do Sys.halt();
            }
            
            if (key = 49) { // 1 key - name Player 1
                // Wait for key release otherwise a 1 will be entered
                while (Keyboard.keyPressed() = 49) {}

                //move to the row below the displayed names and prompt user input
                do Output.moveCursor(19, 21);
                
                //prompt user to enter player 1 name
                let player1Name = Keyboard.readLine("Enter Player 1 name: ");
                                                    
                //move back to start of user input prompt and eras
                do Output.moveCursor(19, 21);

                //clear by printing blank spaces
                do Output.printString("                            ");


                // Clear the player1 display line
                do Output.moveCursor(16, 24);
                do Output.printString("                            ");
                do Output.moveCursor(16, 24);
                do Output.printString("Player 1: ");
                do Output.printString(player1Name);
            }
            
            if (key = 50) { // 2 key - name Player 2
                // Wait for key release otherwise a 1 will be entered
                while (Keyboard.keyPressed() = 50) {}

                //move to the row below the displayed names and prompt user input
                do Output.moveCursor(19, 21);
                //let c = Keyboard.readChar();

                //prompt user to enter player 1 name
                let player2Name = Keyboard.readLine("Enter Player 2 name: ");

                //move back to start of user input prompt and eras
                do Output.moveCursor(19, 21);

                //clear by printing blank spaces
                do Output.printString("                            ");

                // Clear the player1 display line
                do Output.moveCursor(17, 24);
                do Output.printString("                            ");

                do Output.moveCursor(17, 24);
                do Output.printString("Player 2: ");
                do Output.printString(player2Name);
            }
            
            // Brief delay to avoid key bouncing
            do Sys.wait(50);
        }
        
        return false;
    }
    //*****************************************END OF DRAWING THE START SCREEN**********************
}