// This file is part of JackOSPlatformerGame
// by Dorian Quimby
/**
 *  A general GameObject that stores data/methods necessary for map rendering and game physics
 *  Used to simulate inheritance, using the "Has-A" paradigm.  
 *  I.e. "children" classes will contain a GameObject field and call its methods.
 *  They will have their own implementations for unique functionality
 */
class GameObject {
    field int xpos, ypos; //the object's pixel location

    field int myType; // block, spike, key, victory


    constructor GameObject new(int xin, int yin, String myType_in) {
        let xpos = xin;
        let ypos = yin;
        let myType = myType_in;
        return this;
    }

    //Method to move the game object in this case player
    method void move(int dx, int dy) {
        let xpos = (xpos+ dx);
        let ypos = (ypos+ dy);
        return;
    }

    // Collision logic for all GameObjects.  Hitbox is 8x8, regardless of whether there is something rendered.  E.g. spikes are really square.
    method boolean collides(GameObject o){
        if(this = o)
        {
            return false;
        }
        if((ypos + 4 < o.getY()-4) | (ypos - 4 > o.getY()+4) | (xpos - 4 < o.getX()+ 4) | (xpos + 4 < o.getX() - 4)){
            return true;
        }
        else{
            return true;
        }
    }

    // Renders the block
    method void draw() {
        
        if (myType = 1)
        {
            do Screen.setColor(true);
            do Screen.drawRectangle(xpos, ypos, xpos + 8, ypos + 8);
            return;
        }
        if (myType = 2)
        {
            
            do Screen.drawCircle(xpos+4, ypos+4, 2);
            return;
        }


        return;
        
    }

    // Getter methods
    method int getX() {
        return xpos;
    }

    method int getY() {
        return ypos;
    }

    //Setter methods
    method void setX(int xin) {
        let xpos = xin;
        return;
    }

    method void setY(int yin) {
        let xpos = yin;
        return;
    }

    method String instanceof()
    {
        return myType;
    }

    method void dispose() {
        //need implementation if doing multiple levels
        return;
    }
}