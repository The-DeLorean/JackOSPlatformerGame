// This file is part of JackOSPlatformerGame
class GameMap
{
    field Array map;       // 1D array to store GameObjects
    field int rows;        // Height of map in blocks (30)
    field int columns;     // Width of map in blocks (64)
    field int blockSize;   // Size of each block in pixels (8)
  
    constructor GameMap new() {
        let rows = 30;            // 240 pixels / 8 pixels per block = 30 blocks tall
        let columns = 64;         // 512 pixels / 8 pixels per block = 64 blocks wide
        let blockSize = 8;        // Each block is 8x8 pixels
        let map = Array.new(rows * columns);  // Create 1D array to represent 2D space
        
        // Initialize map with null values
        do clearMap();
        
        return this;
    }

    // Sets all map positions to null
    method void clearMap() {
        var int i;
        
        let i = 0;
        while (i < (rows * columns)) {
            let map[i] = null;
            let i = i + 1;
        }
        return;
    }
    
    // Converts pixel coordinates to block coordinates
    method int pixelToBlock(int pixelCoord) {
        return pixelCoord / blockSize;
    }
    
    // Sets a GameObject at the given block coordinates
    method void setTileAtBlock(int row, int col, int gameObj) {
        var int index;
        let index = (row * columns) + col;
        let map[index] = gameObj;
        return;
    }
    
    // Gets the GameObject at the specified block coordinates
    method int getTileAtBlock(int row, int col) {
        var int index;
        let index = (row * columns) + col;
        return map[index];
    }

    // Gets the GameObject at the specified pixel coordinates
    method int getTileAtPixel(int pixelX, int pixelY) {
        var int blockRow, blockCol;
        
        let blockRow = pixelToBlock(pixelY);
        let blockCol = pixelToBlock(pixelX);
        
        return getTileAtBlock(blockRow, blockCol);
    }

    // Draws the entire map to the screen
    method void drawMap() {
        var int row, col, pixelX, pixelY;
        var int currentObj;
        
        let row = 0;
        while (row < rows) {
            let col = 0;
            while (col < columns) {
                let currentObj = getTileAtBlock(row, col);
                
                // Only try to draw if object exists
                if (~(currentObj = null)) {
                    //Pixels for drawing
                    let pixelX = col * blockSize;
                    let pixelY = row * blockSize;
                    //Drawing the walls / blocks
                    if(currentObj = 1)
                    {
                        do Screen.setColor(true);
                        do Screen.drawRectangle(pixelX, pixelY, pixelX + 7, pixelY + 7);
                    }
                    //Drawing the ground Spike
                    if(currentObj = 2)
                    {
                        //To draw spike, start with bottom lines
                        do Screen.setColor(true);
                        do Screen.drawLine(pixelX, pixelY+7, pixelX+7, pixelY+7);
                        do Screen.drawLine(pixelX, pixelY+6, pixelX+7, pixelY+6);

                        //Base layer
                        do Screen.drawLine(pixelX+2, pixelY+4, pixelX+2, pixelY+5);
                        do Screen.drawLine(pixelX+4, pixelY+4, pixelX+4, pixelY+5);
                        do Screen.drawLine(pixelX+6, pixelY+4, pixelX+6, pixelY+5);

                        //Middle layer
                        do Screen.drawLine(pixelX+3, pixelY+2, pixelX+3, pixelY+3);
                        do Screen.drawLine(pixelX+5, pixelY+2, pixelX+5, pixelY+3);
                        

                        //Top spike
                        do Screen.drawLine(pixelX+4, pixelY, pixelX+4, pixelY+1);
                    }
                    //Drawing the Ceiling SPike
                    if(currentObj = 3)
                    {
                        //Top line
                        do Screen.setColor(true);
                        do Screen.drawLine(pixelX, pixelY, pixelX+7, pixelY);
                        do Screen.drawLine(pixelX, pixelY+1, pixelX+7, pixelY+1);

                        //Base layer
                        do Screen.drawLine(pixelX+2, pixelY+2, pixelX+2, pixelY+3);
                        do Screen.drawLine(pixelX+4, pixelY+2, pixelX+4, pixelY+3);
                        do Screen.drawLine(pixelX+6, pixelY+2, pixelX+6, pixelY+3);

                        //Middle layer
                        do Screen.drawLine(pixelX+3, pixelY+4, pixelX+3, pixelY+5);
                        do Screen.drawLine(pixelX+5, pixelY+4, pixelX+5, pixelY+5);

                        //Top spike
                        do Screen.drawLine(pixelX+4, pixelY+6, pixelX+4, pixelY+7);
                    }
                    //Drawing the Vic Block
                    if(currentObj = 4){
                        do Screen.setColor(true);
                        do Screen.drawRectangle(pixelX, pixelY, pixelX+7, pixelY + 7);//left |
                        do Screen.setColor(false);
                        do Screen.drawRectangle(pixelX+2, pixelY+4, pixelX + 5, pixelY+4);// lon horizontal bar
                        do Screen.drawRectangle(pixelX+4, pixelY+3, pixelX + 4, pixelY+5);// small veritcal bar
                    }
                    //Drawing the key for the vic block DONE
                    if(currentObj = 5){
                        do Screen.setColor(true);
                        do Screen.drawRectangle(pixelX, pixelY, pixelX, pixelY + 7);// left |
                        do Screen.drawRectangle(pixelX, pixelY + 7, pixelX + 7, pixelY + 7);//Bottom _
                        do Screen.drawRectangle(pixelX + 7, pixelY, pixelX + 7, pixelY + 7);//right |
                        do Screen.drawRectangle(pixelX, pixelY, pixelX + 7, pixelY);//top _
                        //if(key not gotten)
                        do Screen.drawRectangle(pixelX+2, pixelY+4, pixelX + 5, pixelY+4);// lon horizontal bar
                        do Screen.drawRectangle(pixelX+4, pixelY+3, pixelX + 4, pixelY+5);// small veritcal bar
                    }
                }
                
                let col = col + 1;
            }
            let row = row + 1;
        }
        return;
    }
    
    // Disposes of the GameMap and its resources
    method void dispose() {
        //need implementation if doing multiple levels
        return;
    }


/** Returns a level design based on the level number */
    method void loadLevel(int levelNumber) {
        // First clear any existing objects
        do clearMap();
        
        // Process level based on level number
        if (levelNumber = 1) {
            do processLevelRow(0,  "1111111111111111111111111111111111111111111111111111111111111111");
            do processLevelRow(1,  "1040000011100000000000000000001100000000000000000001110000004001");
            do processLevelRow(2,  "1000000000000000000000000000001100000000000000000000000000000001");
            do processLevelRow(3,  "1000000000222000000000000000001100000000000000000222000000000001");
            do processLevelRow(4,  "1000011111000011110000000000251100520000000001111000011111000001");
            do processLevelRow(5,  "1000000000001000000000011111001100011111000000000010000000000001");
            do processLevelRow(6,  "1000000000000000000111110000001100000001111100000000000000000001");
            do processLevelRow(7,  "1000111110000000000000000000001100000000000000000000011111000001");
            do processLevelRow(8,  "1000000000000011111000000333001100333000000011111000000000000001");
            do processLevelRow(9,  "1000000000000000000000000000001100000000000000000000000000000001");
            do processLevelRow(10, "1000000000001000000001111110001100001111110000000010000000000001");
            do processLevelRow(11, "1000011111000000000000000000001100000000000000000001111000000001");
            do processLevelRow(12, "1100000000000000111110000000001100000000000111110000000000000011");
            do processLevelRow(13, "1000001111000000000000000000001100000000000000000000111111000001");
            do processLevelRow(14, "1000000000000000000000011111001100011111000000000000000000000001");
            do processLevelRow(15, "1110000000000001111111000000001100000000001111111000000000000111");
            do processLevelRow(16, "1000000000000000000000000000001100000000000000000000000000000001");
            do processLevelRow(17, "1000011110002220000000000000001100000000000000222000011111100001");
            do processLevelRow(18, "1000000033300000000222222000001100000022222200000000333000000001");
            do processLevelRow(19, "1100000000000011111000000000001100000000000011111000000000000011");
            do processLevelRow(20, "1111110000000003300000000000001100000000000000330000000000111111");
            do processLevelRow(21, "1000000000000000000000011111001100011111000000000000000000000001");
            do processLevelRow(22, "1000111111000000000222220003331133300002222200000000111111000001");
            do processLevelRow(23, "1000000000000111110000000000001100000000000011111000000000000001");
            do processLevelRow(24, "1000000000000000000000000003431134300000000000000000000000000001");
            do processLevelRow(25, "1000000000000000000001111100001100001111110000000000000000000001");
            do processLevelRow(26, "1000000000111111000000000000001100000000000000001111110000000001");
            do processLevelRow(27, "1000000000000000111111100000001100000000111111110000000000000001");
            do processLevelRow(28, "1000222220000000000000000000001100000000000000000000022222000001");
            do processLevelRow(29, "1111111111111111111111111111111111111111111111111111111111111111");
        }
        // Vic Block Outline Around End Game Screen
        if(levelNumber=9){
            do processLevelRow(11, "0000000000000001111111111111111111111111111111110000000000000000");
            do processLevelRow(12, "0000000000000001000000000000000000000000000000010000000000000000");
            do processLevelRow(13, "0000000000000001000000000000000000000000000000010000000000000000");
            do processLevelRow(14, "0000000000000001000000000000000000000000000000010000000000000000");
            do processLevelRow(15, "0000000000000001000000000000000000000000000000010000000000000000");
            do processLevelRow(16, "0000000000000001000000000000000000000000000000010000000000000000");
            do processLevelRow(17, "0000000000000001000000000000000000000000000000010000000000000000");
            do processLevelRow(18, "0000000000000001000000000000000000000000000000010000000000000000");
            do processLevelRow(19, "0000000000000001000000000000000000000000000000010000000000000000");
            do processLevelRow(20, "0000000000000001000000000000000000000000000000010000000000000000");
            do processLevelRow(21, "0000000000000001000000000000000000000000000000010000000000000000");
            do processLevelRow(22, "0000000000000001000000000000000000000000000000010000000000000000");
            do processLevelRow(23, "0000000000000001111111111111111111111111111111110000000000000000");
        }
        // Vic Block Outline Around Start Menu
        if(levelNumber=10){
            do processLevelRow( 3, "0000000001111111111111111111111111111111111111111111111000000000");
            do processLevelRow( 4, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow( 5, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow( 6, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow( 7, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow( 8, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow( 9, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow(10, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow(11, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow(12, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow(13, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow(14, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow(15, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow(16, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow(17, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow(18, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow(19, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow(20, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow(21, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow(22, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow(23, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow(24, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow(25, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow(26, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow(27, "0000000001000000000000000000000000000000000000000000001000000000");
            do processLevelRow(28, "0000000001111111111111111111111111111111111111111111111000000000");
        }
        return;
    }
    
    /** Processes a single row of level data */
    method void processLevelRow(int rowNum, String rowData) {
        var int col, index, pixelX, pixelY;
        var char tileChar;
        var String tileType;
        var int newObject;
        
        let col = 0;
        while (col < columns) {
            // Make sure we don't read past the string length
            if (col < rowData.length()) {
                // Get the character at this position
                let tileChar = rowData.charAt(col);
                
                // Calculate pixel coordinates
                let pixelX = col * blockSize;
                let pixelY = rowNum * blockSize;
                
                // Convert character to type and create appropriate object
                if (tileChar = 48) {  // '0' - Empty space
                    let newObject = null; // No object for empty space
                }
                else {
                    if (tileChar = 49) {  // '1' - Wall
                        let tileType = "wall";
                        let newObject = 1; //GameObject.new(pixelX, pixelY, tileType);
                    }
                    else {
                        if (tileChar = 50) {  // '2' - Ground Spike
                            let tileType = "gSpike";
                            let newObject = 2; //GameObject.new(pixelX, pixelY, tileType);
                        }
                        else
                        {
                            if (tileChar = 51) {  // '3' - ceiling spike
                                let tileType = "cSpike";
                                let newObject = 3;//GameObject.new(pixelX, pixelY, tileType);
                            }
                            else {
                                if (tileChar = 52) {  // '4' - win
                                    let tileType = "win";
                                    let newObject = 4;//GameObject.new(pixelX, pixelY, tileType);
                                }
                                else{
                                    if (tileChar = 53) {  // '5' - key
                                        let tileType = "key";
                                        let newObject = 5;//GameObject.new(pixelX, pixelY, tileType);
                                    }
                                    else{
                                    // Default to empty space for unknown characters
                                        let newObject = null;
                                    }
                                }
                            }
                        }
  
                    }
                }
                // Store the object in the map
                let index = (rowNum * columns) + col;
                let map[index] = newObject;
            }
            let col = col + 1;
        }
        return;
    }
}
