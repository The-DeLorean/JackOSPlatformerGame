// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 * Represents a PlatformerGame instance
 */
class PlatformerGame {
    static PlatformerGame instance; // A Platformer game     
    field boolean exit;       // true when the game is over
    field Player player1;


    /** Constructs a new Platformer game. */
    constructor PlatformerGame new() {
        //Player init
        let player1 = Player.new(253, 222);

        let exit = false;
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {

        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of a Platformer game. */
    function void newInstance() {
        let instance = PlatformerGame.new();
        return;
    }
    
    /** Returns this Platformer game. */
    function PlatformerGame getInstance() {
        return instance;
    }

    /** Starts the game, and handles inputs from the user that control
     *  the bat's movement direction. */
    method void run() {
        var char key;

        while (~exit) {
            // waits for a key to be pressed.
            do renderGame();

            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();
                do Sys.wait(50); //maybe change to have a quicker game?
            }

            //player movement logic logic gets called
            if (key = 130) { // leftArrow
                do player1.move(-1, 0); 
            }
	        else {
	            if (key = 132) { // rightArrow
                    do player1.move(1, 0); 
                }
		        else {
                    if (key = 140) { let exit = true; }
		        }
            }

            // Waits for the key to be released.
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
                do Sys.wait(50);
            }
        }

	    if (exit) {
            do Output.moveCursor(10,27);
	        do Output.printString("Game Over");
	    }
            
        return;
    }

    /**
     * Handles ball movement, including bouncing.
     * If the ball bounces off a wall, finds its new direction.
     * If the ball bounces off the bat, increases the score by one
     * and shrinks the bat's size, to make the game more challenging. 
     */
    method void movePlayers() {
        
        return;
    }

    //called every "cycle" to draw the game
    method void renderGame(){
        do Screen.clearScreen();

        //Scoreboard drawing
        do Screen.setColor(true);
        do Screen.drawRectangle(0, 238, 511, 240);
	    do Output.moveCursor(22,0);
	    do Output.printString("Score: 0");

        // Map drawing

        //Player drawing
        do player1.draw();
        return;
    }
}