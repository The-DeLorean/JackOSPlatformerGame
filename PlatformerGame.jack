// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 * Represents a PlatformerGame instance
 */
class PlatformerGame {
    static PlatformerGame instance; // A Platformer game     
    field boolean exit;       // true when the game is over
    field Player player1;
    field GameMap gameMap;


    /** Constructs a new Platformer game. */
    constructor PlatformerGame new() {
        //Player init
        let player1 = Player.new(253, 200);

        let gameMap = GameMap.new();

        // Map drawing
        do gameMap.clearMap();
        do gameMap.loadLevel(1);
        do gameMap.drawMap();

        let exit = false;
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {

        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of a Platformer game. */
    function void newInstance() {
        let instance = PlatformerGame.new();
        return;
    }
    
    /** Returns this Platformer game. */
    function PlatformerGame getInstance() {
        return instance;
    }

    /** Starts the game, and handles inputs from the user that control
     *  the bat's movement direction. */
    method void run() {
        //Variable to hold key pressed
        var char key;
        //variable to use in gravity looop
        var int gravityLoop, jumpLoop;
        var int number, tick, jump;
        var boolean p1OnGround;

        //Initalizing variables
        let gravityLoop = 0;
        let jumpLoop = 0;
        let number = 0;
        let tick = 0;
        let jump = 0;

        //Main loop that runs until the game is over
        while (~exit) {
            //Checking to see what key is pressed continually
            let key = Keyboard.keyPressed();

            //player movement logic logic gets called
            if (key = 130) { // leftArrow
                do player1.move(-1, 0, gameMap);
            }
	        else {
	            if (key = 132) { // rightArrow
                    do player1.move(1, 0, gameMap);
                }
		        else {
                    if (key = 140) { let exit = true; }
		        }
            }
            
            //Checking to see if player 1 is on the ground if so checking to see if the jump key is pressed
            let p1OnGround = player1.isOnGround(gameMap);

            if(key = 131){ // Up Arrow
                //Store jump value and reset number
                if(p1OnGround = true){
                    let jump = 100;
                    let number = 1;
                }
            }

            //If up arrow is not pressed on ground reset tick and number
            if (p1OnGround =true){
                let number = 1;
                let tick = 0;
            }

            if(p1OnGround = false) {//If not on ground run gravity logic
                //If the player hits cieling kill jump momentum
                if(player1.hitsCieling(gameMap)){
                    let jump=0;
                }
                //Resetting the gravity loop variable before it is run
                let gravityLoop = 0;
                //Gravity moves player down number * 1 pixels
                while(gravityLoop < number){
                    //moving the player down
                    do player1.move(0, 1, gameMap);
                    //incrementing through the gravity loop
                    let gravityLoop = gravityLoop + 1;
                }
            }

            //Checking to see if the jump ahs been triggered
            if(jump > 0){
                //Jumping a certain amount each time.
                while(jumpLoop < (jump/10)){
                    //moving the player up
                    do player1.move(0, -1, gameMap);
                    //incrementing through the jump loop
                    let jumpLoop = jumpLoop + 1;
                }
                //Making the player move up less as jump decreases
                let jump = jump - 1;
            }

            //Cycling every 20 ticks to make player fall back down more and more  adding in acceleration
            if(tick =20)
            {
                //Increasing the speed the palyer falls each 20 ticks
                let tick =1;
                if(number < 8){
                    let number = number + 1;
                }
            }
            else{
                //Counting the ticks
                let tick = tick + 1;
            }

            do renderGame(); // render game graphics after move to help with collisions
            do Sys.wait(5);// wait to slow down game 
        }

	    if (exit) {
            do Output.moveCursor(10,27);
	        do Output.printString("Game Over");
	    }
        return;
    }

    //called every "cycle" to draw the game
    method void renderGame(){
        //Scoreboard drawing
        do Screen.setColor(true);
        do Screen.drawRectangle(0, 238, 511, 240);
	    do Output.moveCursor(22,0);
	    do Output.printString("Score: 0");

        
        //Player drawing
        do player1.draw();
        return;
    }
}