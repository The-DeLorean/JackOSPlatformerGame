// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 * Represents a PlatformerGame instance
 */
class PlatformerGame {
    static PlatformerGame instance; // A Platformer game     
    field boolean exit;       // true when the game is over
    field Player player1;
    field GameMap gameMap;


    /** Constructs a new Platformer game. */
    constructor PlatformerGame new() {
        //Player init
        let player1 = Player.new(253, 222);

        let gameMap = GameMap.new();

        // Map drawing
        do gameMap.clearMap();
        do gameMap.loadLevel(1);
        do gameMap.drawMap();

        let exit = false;
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {

        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of a Platformer game. */
    function void newInstance() {
        let instance = PlatformerGame.new();
        return;
    }
    
    /** Returns this Platformer game. */
    function PlatformerGame getInstance() {
        return instance;
    }

    /** Starts the game, and handles inputs from the user that control
     *  the bat's movement direction. */
    method void run() {
        var char key;
        //Main loop that runs until the game is over
        while (~exit) {
            //Checking to see what key is pressed continually
            let key = Keyboard.keyPressed();

            //player movement logic logic gets called
            if (key = 130) { // leftArrow
                do player1.move(-1, 0); 
            }
	        else {
	            if (key = 132) { // rightArrow
                    do player1.move(1, 0); 
                }
		        else {
                    if (key = 140) { let exit = true; }
		        }
            }
            //if(key = 131 & NOT_ON_IN_AIR){ // Up Arrow
            //    do player1.jump(); //Mkaing the player jump if up arrow is pressed
            //}
            do renderGame(); // render game graphics after move to help with collisions
            do Sys.wait(5);// wait to slow down game 
        }

	    if (exit) {
            do Output.moveCursor(10,27);
	        do Output.printString("Game Over");
	    }
        return;
    }

    //called every "cycle" to draw the game
    method void renderGame(){
        //do Screen.clearScreen();

        //Scoreboard drawing
        do Screen.setColor(true);
        do Screen.drawRectangle(0, 238, 511, 240);
	    do Output.moveCursor(22,0);
	    do Output.printString("Score: 0");

        
        //Player drawing
        do player1.draw();
        return;
    }
}