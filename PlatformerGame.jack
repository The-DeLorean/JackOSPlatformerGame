// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 * Represents a PlatformerGame instance
 */
class PlatformerGame {
    static PlatformerGame instance; // A Platformer game     
    field boolean exit;       // true when the game is over
    field Player player1;
    field Player player2;
    field GameMap gameMap;


    /** Constructs a new Platformer game. */
    constructor PlatformerGame new() {
        //Player init
        let player1 = Player.new(253, 100);
        let player2 = Player.new(100, 100);

        let gameMap = GameMap.new();

        // Map drawing
        do gameMap.clearMap();
        do gameMap.loadLevel(1);
        do gameMap.drawMap();

        let exit = false;
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {

        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of a Platformer game. */
    function void newInstance() {
        let instance = PlatformerGame.new();
        return;
    }
    
    /** Returns this Platformer game. */
    function PlatformerGame getInstance() {
        return instance;
    }

    /** Starts the game, and handles inputs from the user that control
     *  the bat's movement direction. */
    method void run() {
        //Main loop that runs until the game is over
        while (~exit) {
            do player1Logic(player1);
            do player2Logic(player2);

            do renderGame(); // render game graphics after move to help with collisions
            do Sys.wait(5);// wait to slow down game 
        }

	    if (exit) {
            do Output.moveCursor(10,27);
	        do Output.printString("Game Over");
	    }
        return;
    }

    //called every "cycle" to draw the game
    method void renderGame(){
        //Scoreboard drawing
        do Screen.setColor(true);
        do Screen.drawRectangle(0, 238, 511, 240);
	    do Output.moveCursor(22,0);
	    do Output.printString("Score: 0");

        
        //Player drawing
        do player1.draw();
        do player2.draw();
        return;
    }

    method void player1Logic(Player player){
        var char key;
        var boolean p1OnGround;
        //Checking to see what key is pressed continually
        let key = Keyboard.keyPressed();

        //player movement logic logic gets called
        if (key = 130) { // leftArrow
            //make move left
            do player.setDir(true);
        }
        else {
            if (key = 132) { // rightArrow
                //make move right 
                do player.setDir(false);
            }
            else {
                if (key = 140) { let exit = true; }
            }
        }

        //Move that way until changed
        if(player.getDir())
        {
            do player.move(-1, 0, gameMap);
        }
        else{
            do player.move(1, 0, gameMap);
        }
        
        //Checking to see if player 1 is on the ground if so checking to see if the jump key is pressed
        let p1OnGround = player.isOnGround(gameMap);

        if(key = 131 & p1OnGround){ // Up Arrow
            //Store jump value and reset number
            do player.setJump(400);  //let jump1 = 200;
            do player.setNumber(1);  // let number1 = 1;
            do player.setJumpLoop(0); //let jumpLoop1 = 0;
        }

        //If up arrow is not pressed on ground reset tick and number
        if (p1OnGround = true){
            do player.setNumber(1);  // let number1 = 1;
            do player.setTick(0);    //let tick1 = 0;
        }

        if(p1OnGround = false) {//If not on ground run gravity logic
            //If the player hits cieling kill jump momentum
            if(player.hitsCieling(gameMap) = true){
                do player.setJump(0);  //let jump1 = 200;//let jump1=0;
            }
            //Resetting the gravity loop variable before it is run
            do player.setGravity(0);  //let gravityLoop1 = 0;
            //Gravity moves player down number * 1 pixels
            while (player.getGravity() < player.getNumber()){ //(gravityLoop1 < number1){
                //moving the player down
                do player.move(0, 1, gameMap);
                //incrementing through the gravity loop
                do player.setGravity((player.getGravity() + 1)); //let gravityLoop1 = gravityLoop1 + 1;
            }
        }

        //Checking to see if the jump ahs been triggered
        if(player.getJump() > 0) { //(jump1 > 0){
        
            //Jumping a certain amount each time.
            while(player.getJumpLoop() < (player.getJump()/10)){ //(jumpLoop1 < (jump1/10)){
                //moving the player up
                do player.move(0, -1, gameMap);
                //incrementing through the jump loop
                do player.setJumpLoop((player.getJumpLoop()+1)); //let jumpLoop1 = jumpLoop1 + 1;
            }
            //Making the player move up less as jump decreases
            do player.setJump(player.getJump() - 1); //let jump1 = jump1 - 1;
        }

        //Cycling every 20 ticks to make player fall back down more and more  adding in acceleration
        if(player.getTick() = 20) //(tick1 =20)
        {
            //Increasing the speed the palyer falls each 20 ticks
            do player.setTick(1); //let tick1 =1;
            if(player.getNumber() < 8){ //(number1 < 8){
                do player.setNumber(player.getNumber() + 1);//let number1 = number1 + 1;
            }
        }
        else{
            //Counting the ticks
            do player.setTick(player.getTick() + 1); //let tick1 = tick1 + 1;
        }
        return;
    }

    method void player2Logic(Player player){
        //a = 97, d =100, w =119
        var char key;
        var boolean p2OnGround;
        //Checking to see what key is pressed continually
        let key = Keyboard.keyPressed();

        //player movement logic logic gets called
        if (key = 97) { // a key
            //making the player move left
            do player.setDir(true);
        }
        else {
            if (key = 100) { // d key
                //making the player move right
                do player.setDir(false);
            }
            else {
                if (key = 140) { let exit = true; }
            }
        }

        //Seeing which way we are moving and move it
        if(player.getDir())
        {
            do player.move(-1, 0, gameMap);
        }
        else{
            do player.move(1, 0, gameMap);
        }
        
        //Checking to see if player 1 is on the ground if so checking to see if the jump key is pressed
        let p2OnGround = player.isOnGround(gameMap);

        if(key = 119 & p2OnGround){ // w key
            //Store jump value and reset number
            do player.setJump(300);  //let jump1 = 200;
            do player.setNumber(1);  // let number1 = 1;
            do player.setJumpLoop(0); //let jumpLoop1 = 0;
        }

        //If up arrow is not pressed on ground reset tick and number
        if (p2OnGround = true){
            do player.setNumber(1);  // let number1 = 1;
            do player.setTick(0);    //let tick1 = 0;
        }

        if(p2OnGround = false) {//If not on ground run gravity logic
            //If the player hits cieling kill jump momentum
            if(player.hitsCieling(gameMap) = true){
                do player.setJump(0);  //let jump1 = 200;//let jump1=0;
            }
            //Resetting the gravity loop variable before it is run
            do player.setGravity(0);  //let gravityLoop1 = 0;
            //Gravity moves player down number * 1 pixels
            while (player.getGravity() < player.getNumber()){ //(gravityLoop1 < number1){
                //moving the player down
                do player.move(0, 1, gameMap);
                //incrementing through the gravity loop
                do player.setGravity((player.getGravity() + 1)); //let gravityLoop1 = gravityLoop1 + 1;
            }
        }

        //Checking to see if the jump ahs been triggered
        if(player.getJump() > 0) { //(jump1 > 0){
        
            //Jumping a certain amount each time.
            while(player.getJumpLoop() < (player.getJump()/10)){ //(jumpLoop1 < (jump1/10)){
                //moving the player up
                do player.move(0, -1, gameMap);
                //incrementing through the jump loop
                do player.setJumpLoop((player.getJumpLoop()+1)); //let jumpLoop1 = jumpLoop1 + 1;
            }
            //Making the player move up less as jump decreases
            do player.setJump(player.getJump() - 1); //let jump1 = jump1 - 1;
        }

        //Cycling every 20 ticks to make player fall back down more and more  adding in acceleration
        if(player.getTick() = 20) //(tick1 =20)
        {
            //Increasing the speed the palyer falls each 20 ticks
            do player.setTick(1); //let tick1 =1;
            if(player.getNumber() < 8){ //(number1 < 8){
                do player.setNumber(player.getNumber() + 1);//let number1 = number1 + 1;
            }
        }
        else{
            //Counting the ticks
            do player.setTick(player.getTick() + 1); //let tick1 = tick1 + 1;
        }
        return;
    }
}