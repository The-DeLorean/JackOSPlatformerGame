// This file is part of JackOSPlatformerGame
// by Dorian Quimby
/**
 *  A child class of GameObject, which contains the functionality of a Player
 *  Players can move, collect KeyBlocks, die when the touch spikeblocks, and reach the VictoryBlock
 */
class Player {
    field int livesRemaining; //keeps track of deaths, will work with spikeblock
    static int speed; //
    field boolean win;
    field boolean death;
    field boolean key;
    field int xpos, ypos, prevXPos, prevYPos;

    constructor Player new(int xin, int yin) {
        //Compose a child member data into parent game object
        let xpos = xin;
        let ypos = yin;
        let speed = 5;
        return this;
    }

    // Players can move
    method void move(int dx, int dy, GameMap map) {
        let xpos = (xpos+ dx);
        let ypos = (ypos+ dy);
        if(collides(map) = true){
            let xpos = (xpos - dx);
            let ypos = (ypos - dy);
        }
        else{
            let prevXPos = xpos;
            let prevYPos = ypos;
        }
        return;
    }


    // Renders the player
    method void draw() {
        do Screen.setColor(false);
        do Screen.drawRectangle(prevXPos, prevYPos, prevXPos + 8, prevYPos + 8);
        do Screen.setColor(true);
        do Screen.drawRectangle(xpos, ypos, xpos + 8, ypos + 8);
        return;
    }

    //method to check if the player is on the ground
    method boolean isOnGround(GameMap map){
        //creating a check variable
        var boolean check;
        //incrementing the y value after move
        let ypos = ypos + 1;
        //checking with the map
        let check = collides(map);
        //decrementing the y value after move to move player back
        let ypos = ypos - 1;
        //Cecking whether to see if the collision was true or not returning the respective varaiable
        if(check = true){
            return true;
        }
        else{
            return false;
        }
    }

    //Checking to see if the player hits the ceiling
    method boolean hitsCieling(GameMap map){
        //creating a check variable
        var boolean check;
        //decrementing the y to check 1 ahead
        let ypos = ypos - 1;
        //checking with the map
        let check = collides(map);
        //Incrementing the y value after move to move player back
        let ypos = ypos + 1;
        //Cecking whether to see if the collision was true or not returning the respective varaiable
        if(check = true){
            return true;
        }
        else{
            return false;
        }
    }

    method boolean collides(GameMap map){
        //variables to count loop iterations
        var int rowSize;
        var int columnSize;
        var int i;
        var int j;
        //Variable to hold the collision flag
        var boolean collision;
        //variable to hold the gameObject from the array
        var GameObject gameObj;

        //initalizing loop variables.
        let rowSize = 30;
        let columnSize = 64;
        let i=0;

        while(i < rowSize)
        {
            let j = 0;
            //looping through the specific column
            while (j < columnSize){
                let gameObj = map.getTileAtBlock(i,j);
                //variable to hold the individual collision
                let collision = overlap(gameObj);
                if(collision)
                {
                    /** Checking to see if the collision is with the victory block
                    if(gameObj.instanceof() = "vicBlock")
                    {
                        let win = true;
                    }
                    //Checking to see if the collision is with the key block
                    if(gameObj.getType() = 3)
                    {
                        let key = true;
                    }
                    //checking to see if the collisiton is with a spike
                    if(gameObj.getType() = "spike")
                    {
                        let death = true;
                    }
                    */
                    //returning true if a collision has occured
                    return true; 
                }
                //incrementing the column position
                let j = j + 1;
            }
            //incrementing the row position
            let i = i + 1;
        }
        return false;
    }

    // Collision logic for all GameObjects.  Hitbox is 8x8, regardless of whether there is something rendered.  E.g. spikes are really square.
    method boolean overlap(GameObject o){
        /**if(((ypos + 4) < (o.getY())) | ((ypos - 4) > (o.getY() + 8)) | ((xpos - 4) > (o.getX() + 8)) | ((xpos + 4) < (o.getX()))){
            return false;
        }
        else{
            return true;
        }*/
        if(o = null){
            return false;
        }
        return ((xpos < (o.getX() + 8)) & ((xpos + 8) > o.getX()) & (ypos < (o.getY() + 8)) & ((ypos + 8) > o.getY()));
        /**{
            return true;
        }
        else{
            return false;
        }*/
    }

    //Accessor for the win boolean variable
    method boolean won()
    {
        return win;
    }
    //Accessor for the win boolean variable
    method boolean died()
    {
        return death;
    }
    //Accessor for the win boolean variable
    method boolean hasKey()
    {
        return key;
    }

    //a method to create a new life
    method void newLife(){
        let death = false;
        return;
    }

    method String instanceof()
    {
        return "Player";
    }
}