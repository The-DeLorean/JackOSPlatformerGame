// This file is part of JackOSPlatformerGame
// by Dorian Quimby
/**
 *  A child class of GameObject, which contains the functionality of a Player
 *  Players can move, collect KeyBlocks, die when the touch spikeblocks, and reach the VictoryBlock
 */
class Player {
    field int livesRemaining; //keeps track of deaths, will work with spikeblock
    static int speed; //
    field boolean win;
    field boolean death;
    field boolean key;
    field int xpos, ypos, prevXPos, prevYPos;

    constructor Player new(int xin, int yin) {
        //Compose a child member data into parent game object
        let xpos = xin;
        let ypos = yin;
        let speed = 5;
        return this;
    }

    // Players can move with improved collision handling
    method void move(int dx, int dy, GameMap map) {
        var boolean check;
        
        // Store previous position
        let prevXPos = xpos;
        let prevYPos = ypos;
        
        // First move horizontally and check collision
        let xpos = xpos + dx;
        let check = collides(map);
        if(check = true) {
            // Restore previous x position if collision detected
            let xpos = prevXPos;
        }
        
        // Then move vertically and check collision
        let ypos = ypos + dy;
        let check = collides(map);
        if(check = true) {
            // Restore previous y position if collision detected
            let ypos = prevYPos;
        }
        
        // Draw player at new position
        do draw();
        return;
    }

    // Renders the player
    method void draw() {
        do Screen.setColor(false);
        do Screen.drawRectangle(prevXPos, prevYPos, prevXPos + 7, prevYPos + 7);
        do Screen.setColor(true);
        do Screen.drawRectangle(xpos, ypos, xpos + 7, ypos + 7);
        return;
    }

    //method to check if the player is on the ground
    method boolean isOnGround(GameMap map){
        var boolean check;
        var int originalY;
        
        // Save original position
        let originalY = ypos;
        
        // Check one pixel below the player's feet
        let ypos = ypos + 1;
        let check = collides(map);
        
        // Restore original position
        let ypos = originalY;
        
        return check;
    }

    //Checking to see if the player hits the ceiling
    method boolean hitsCieling(GameMap map){
        var boolean check;
        var int originalY;
        
        // Save original position
        let originalY = ypos;
        
        // Check one pixel above the player's head
        let ypos = ypos - 1;
        let check = collides(map);
        
        // Restore original position
        let ypos = originalY;
        
        return check;
    }

    // Check for collisions using block-based approach
    //this method calculate the four corners of the player and checks to see if there is a tile at that location
    method boolean collides(GameMap map) {
        var int blockRow, blockCol; //used to store the row and column of the block that we are checking the player against
        var GameObject gameObj;     //gameobject that is used as the comparison value against which player is checked
        var String objType;         //if there is a tile or spike, collide -- if null then let player pass
        
        // Calculate the blocks that the player is currently occupying
        // Check each corner of the player's 8x8 hitbox
        
        // Top-left corner
        let blockRow = ypos/8;
        let blockCol = xpos/8;

        //get the tile at that blockRow and block col -- getTileAtBlock returns the gameobject
        let gameObj = map.getTileAtBlock(blockRow, blockCol);
        //if there is a wall or a spike, collide with the player
        if (~(gameObj = null)) {
            //get the type of tile that the object is
            let objType = gameObj.instanceof();
            //if it is a spike, kill the player
            if (objType = "spike") {
                let death = true;
            }
            //if it is a win, set win to true
            if (objType = "win") {
                let win = true;
            }
            return true;
        }
        
        // Top-right corner
        let blockRow = ypos/8;
        let blockCol = (xpos + 7)/8;
        //get the tile at that blockRow and block col -- getTileAtBlock returns the gameobject
        let gameObj = map.getTileAtBlock(blockRow, blockCol);
        //if there is a wall or a spike, collide with the player
        if (~(gameObj = null)) {
            //get the type of tile that the object is
            let objType = gameObj.instanceof();
            //if it is a spike, kill the player
            if (objType = "spike") {
                let death = true;
            }
            //if it is a win, set win to true
            if (objType = "win") {
                let win = true;
            }
            return true;
        }
        
        // Bottom-left corner
        let blockRow = (ypos + 7)/8;
        let blockCol = xpos/8;
        //get the tile at that blockRow and block col -- getTileAtBlock returns the gameobject
        let gameObj = map.getTileAtBlock(blockRow, blockCol);
        //if there is a wall or a spike, collide with the player
        if (~(gameObj = null)) {
            //get the type of tile that the object is
            let objType = gameObj.instanceof();
            //if it is a spike, kill the player
            if (objType = "spike") {
                let death = true;
            }
            //if it is a win, set win to true
            if (objType = "win") {
                let win = true;
            }
            return true;
        }
        
        // Bottom-right corner
        let blockRow = (ypos + 7)/ 8;
        let blockCol = (xpos + 7)/8;
        //get the tile at that blockRow and block col -- getTileAtBlock returns the gameobject
        let gameObj = map.getTileAtBlock(blockRow, blockCol);
        //if there is a wall or a spike, collide with the player
        if (~(gameObj = null)) {
            //get the type of tile that the object is
            let objType = gameObj.instanceof();
            //if it is a spike, kill the player
            if (objType = "spike") {
                let death = true;
            }
            //if it is a win, set win to true
            if (objType = "win") {
                let win = true;
            }
            return true;
        }
        
        // No collision detected
        return false;
    }
    

    //Accessor for the win boolean variable
    method boolean won() {
        return win;
    }
    
    //Accessor for the death boolean variable
    method boolean died() {
        return death;
    }
    
    //Accessor for the key boolean variable
    method boolean hasKey() {
        return key;
    }

    //a method to create a new life
    method void newLife() {
        let death = false;
        return;
    }

    method String instanceof() {
        return "Player";
    }
}
